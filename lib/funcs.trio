// Copyright (C) 2017, National Renewable Energy Laboratory
// All Rights Reserved

---
name:antiJoin
func
doc:
  Returns all rows from 'a' where there are *not* matching values in 'b', keeping columns from 'a'
  only.
  
  'antiJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("anti", a, b, by, opts)
---
name:arity
func
doc:
  Given a function name 'fn', return the number of arguments the function accepts.
src:
  (fn) => params(fn).size
---
name:dictToFilter
func
doc:
  Transform the contents of a dict into a string compatible with `parseFilter`. The resulting
  filter string matches records with tags that include all the name-value pairs in dict 'd'.

  Notes
  -----
  
  1. All simple Axon data types are supported except dateTimes, which have no Axon literal.
  2. Dicts that contain reserved keywords as names, such as "return", will not throw an error but
     but may cause downstream functions such as `parseFilter` to fail.
  3. Null values in 'd' will cause `parseFilter` to fail downstream; use the utility function
     `removeNull` as needed to clean the input.
src:
  (d) => do
    // Start filter string
    s: ""
  
    // Create filter string
    d.each() (v, n) => do
      // Add logical operator
      if (s.size > 0) s = s + " and "
  
      // Add name
      s = s + n
  
      // Add value
      if (v != marker()) do
        s = s + "==" + v.toAxonCode
      end
    end
  
    // Return filter string
    s
  end
---
name:exportFunctions
func
doc:
  Exports a grid of functions 'funcs' to a tagged record input/output (TRIO) file 'filename' for
  reuse elsewhere. If missing, the "io/" prefix and ".trio" suffix are added to 'filename'
  automatically. See also `importFunctions`. 
  
  Examples
  --------
  
    readAll(func).exportFunctions("myFunctions")  >> Writes to `io/myFunctions.trio`
src:
  (funcs, filename) => do
    // Check filename
    if (not(filename.toStr.startsWith("io/"))) filename = "io/" + filename
    if (not(filename.toStr.lower.endsWith(".trio"))) filename = filename + ".trio"
    
    // Write output
    funcs.toGrid
      .map(f => f.remove("id").remove("mod"))
      .sort("name")
      .ioWriteTrio(filename.parseUri)
  end
---
name:fullJoin
func
doc:
  Returns all rows and columns from both 'a' and 'b'. Rows in 'a' with no match in 'b' will have
  missing entries in the columns joined from 'b', and vice versa.
  
  'fullJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("full", a, b, by, opts) 
---
name:hasAll
func
doc:
  Returns *true* if 'x' has all the elements in 'names'.
  
  - For dicts, search by key names
  - For grids, search by column names
src:
  (x, names) => do
    // Ensure names is a list
    if (not(names.isList)) throw "'names' must be a list of strings."
    
    // On any missing name, return false
    if (x.isGrid) do
      out: names.eachWhile() n => if (n.in(x.colNames)) null else false
    
    else if (x.isDict) do
      out: names.eachWhile() n => if (x.has(n)) null else false
    
    else do
      throw "'x' must be a dict or grid."
    end
    
    // Return: null => true, false => false
    if (out == null) return true else return false
  end
---
name:hasAny
func
doc:
  Returns *true* if 'x' has any of the elements in 'names'.
  
  - For dicts, search by key names
  - For grids, search by column names
src:
  (x, names) => do
    // Ensure names is a list
    if (not(names.isList)) throw "'names' must be a list of strings."
    
    // On any matched name, return true
    if (x.isGrid) do
      out: names.eachWhile() n => if (n.in(x.colNames)) true else null
    
    else if (x.isDict) do
      out: names.eachWhile() n => if (x.has(n)) true else null
    
    else do
      throw "'x' must be a dict or grid."
    end
    
    // Return: true => true, null => false
    if (out == null) return false else return true
  end
---
name:importFunctions
func
doc:
  Imports a tagged record input/output (TRIO) file of functions and commits them to the Folio.
  If missing, the "io/" prefix and ".trio" suffix are added to 'filename' automatically. See also
  `exportFunctions`. 
  
  Examples
  --------
  
    importFunctions("myFunctions")  >> Reads from `io/myFunctions.trio`
src:
  (filename) => do
    // Check filename
    if (not(filename.toStr.startsWith("io/"))) filename = "io/" + filename
    if (not(filename.toStr.lower.endsWith(".trio"))) filename = filename + ".trio"
    
    // Read and commit functions
    ioReadTrio(filename.parseUri)
      .findAll(rec => rec.has("func"))
      .each() f => commit(diff(null, f, {add}))
  end
---
name:in
func
doc:
  Convenience for 'b.contains(a)'; see `contains`.
src:
  (a, b) => b.contains(a)
---
name:innerJoin
func
doc:
  Returns all rows from 'a' where there are matching values in 'b' and all columns from 'a' and 'b'.
  If there are multiple matches between 'a' and 'b', all combinations of the matches are returned.
  
  'innerJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("inner", a, b, by, opts)
---
name:intersect
func
doc:
  Returns the set intersection of two lists or dicts 'a' and 'b'. Behavior for dicts differs by
  'checked':
  
  - If 'checked' is *true*, verifies that keys included in both 'a' and 'b' have matching values,
    and throws an error on mismatch.
  - If 'checked' is *false*, excludes name-value pairs with matching keys but differing values.

  Examples
  --------
  
    intersect([1, 2, 3],[2, 3, 4])        >> [2, 3]
    intersect({a, b}, {a, c})             >> {a}
    intersect({a, b:1}, {a, b:1})         >> {a, b:1}
    intersect({a, b:1}, {a, b:2})         >> error
    intersect({a, b:1}, {a, b:2}, false)  >> {a}
src:
  (a, b, checked:true) => do
    // Lists
    if(a.isList and b.isList) do
      return a.findAll(v => b.contains(v)).unique
    
    // Dicts
    else if(a.isDict and b.isDict) do
      // Common names
      cn: a.names.findAll() n => b.names.contains(n)
      
      // Filter
      a = a.findAll() (v, n) => cn.contains(n)
      
      // Value matching
      if (checked) do
        // Values must match
        a.each() (v, n) => if (b[n] != v) throw "Values do not match for key \"" + n + "\"."
      end else do
        // Discard keys with mismatched values
        a.each() (v, n) => if (b[n] != v) a = a.remove(n)
      end
      
      // Return
      return a
    
    // Other
    else do
      throw "Invalid arguments; need two lists or two dicts."
    end
  end
---
name:isNA
func
doc:
  Returns *true* if 'val' is equal to NA, *false* otherwise.
src:
  (val) => val == na() 
---
name:isNull
func
doc:
  Returns *true* if 'val' is null, *false* otherwise.
src:
  (val) => val == null
---
name:joinWithMethod
func
nodoc
src:
  // Core implementation of *Join functions
  (method, a, b, by, opts) => do
    
    //// Options ///////////////////////////////////////////////////////////////////////////////////
    
    // Option type checking
    if (not(opts.isDict)) throw "'opts' must be a dict."
        
    // Method
    method = method.lower
    
    // Merge defaults
    opts = {keep:"both", suffix:{a:"a", b:"b"}}.merge(opts)
    
    // Sanitize 'keep' option
    opts = opts.set("keep", opts->keep.lower)
    if (not(opts["keep"].in(["a", "b", "both", "neither", "drop", "na"]))) do
      throw "Option 'keep' must be one of: a, b, both, neither, drop, na"
    end
    if (opts["keep"] == "drop") opts = opts.set("keep", "neither")
    if (method.in(["semi","anti"])) opts = opts.set("keep", "a") // Override for antiJoin, semiJoin
    
    // Sanitize 'suffix' option
    if (opts["suffix"].isList) do
      if (opts->suffix.size < 2) throw "List for option 'suffix' must have two elements."
      opts = opts.set("suffix", {a:opts->suffix[0], b:opts->suffix[1]})
    end else if (opts["suffix"].isDict) do
      if (not(opts->suffix.hasAll(["a","b"]))) do
        throw "Dict for option 'suffix' must have named elements \"a\" and \"b\"."
      end
      opts = opts.set("suffix", opts->suffix.map(v => v.toStr.toTagName))
    end else do
      throw "Option 'suffix' must be a list or dict."
    end
    
    //// Join Columns //////////////////////////////////////////////////////////////////////////////
    
    // Null: Natural join
    if (by == null) do
      by = intersect(colNames(a),colNames(b))
    end
    
    // String: Single column
    if (by.isStr) do
      by = {}.set(by, by)
    end
    
    // List: Multiple columns with same name 
    if (by.isList) do
      by.each() v => do
        if (not(v.isStr)) throw "Each element of 'by' must be a string."
      end
      newBy: {}
      by.each() v => newBy = newBy.set(v, v)
      by = newBy
    end
    
    // Dict: Multiple columns with same or different names 
    if (by.isDict) do
      by.each() v => do
        if (not(v.isStr)) throw "Each element of 'by' must be a string."
      end
    
    // Other: Error
    else do
      throw "If specified, 'by' must be a string, list, or dict containing valid column names."
    end
    
    // Check results
    by.each() (v, n) => do
      if (a.missing(n)) throw "Column \"" + n + "\" is missing from grid 'a'."
      if (b.missing(v)) throw "Column \"" + v + "\" is missing from grid 'b'."
    end
    
    // Key names = grid A columns, key values = grid B columns
      
    //// Merge Action Function /////////////////////////////////////////////////////////////////////
    
    joinMerge: (rowA, rowB, overlap, keep) => do
      // On conflict: keep A
      if (keep == "a") return merge(rowB, rowA)

      // On conflict: keep B
      if (keep == "b") return merge(rowA, rowB)

      // On conflict: keep both (columns already renamed)
      if (keep == "both") return merge(rowB, rowA)

      // Find conflicts
      conflict: overlap.findAll() n => rowA.has(n) and rowB.has(n) and rowA[n] != rowB[n]

      // On conflict: drop
      if (keep == "neither") do
        return merge(rowB, rowA).map((v, n) => if (n.in(conflict)) null else v)
      end

      // On conflict: convert to NA
      if (keep == "na") do
        return merge(rowB, rowA).map((v, n) => if (n.in(conflict)) na() else v)
      end
    end
    
    //// Setup /////////////////////////////////////////////////////////////////////////////////////
    
    // Initialize output grid
    out: {}.toGrid
    
    // Check for conflicts (Left, Right, Inner, and Full joins only)
    if (method.in(["left", "right", "inner", "full"])) do
      // Overlapping columns (possible sources of conflicts)
      overlap: intersect(
        colNames(a).setDiff(names(by)),
        colNames(b).setDiff(vals(by))
      )

      // Preemptive column renaming
      if (opts->keep == "both") do
        overlap.each() n => do
          a = a.renameCol(n, n + "_" + opts->suffix->a)
          b = b.renameCol(n, n + "_" + opts->suffix->b)
        end
      end
    end
    
    //// Perform Join //////////////////////////////////////////////////////////////////////////////
    
    // LEFT, INNER, FULL (Common and A-unique rows)
    if (method.in(["left", "inner", "full"])) do
      
      // Iterate on rows of A
      a.each() rowA => do
        // Find matches in B
        match: b.findAll() rowB => do
          by.all() (colB, colA) => rowA[colA] == rowB[colB]
        end

        // No matches
        if (match.isEmpty) do
          if (method.lower == "inner") do
            return null // INNER
          else do
            out = out.addRow(rowA) // LEFT, FULL
          end

        // Matches
        else do
          out = out.addRows(
            // Merge rows
            match.map() rowB => joinMerge(rowA, rowB, overlap, opts->keep)
          )
        end
      end
      
    end
    
    // RIGHT, FULL (B-unique rows)
    if (method.in(["right", "full"])) do
      
      // Iterate rows of B
      b.each() rowB => do
        // Find matches in A
        match: a.findAll() rowA => do
          by.all() (colB, colA) => rowA[colA] == rowB[colB]
        end

        // No matches
        if (match.isEmpty) do
          out = out.addRow(rowB) // RIGHT, FULL

        // Matches
        else if (method.lower == "right") do
          // RIGHT
          out = out.addRows(
            // Merge rows
            match.map() rowA => joinMerge(rowA, rowB, overlap, opts->keep)
          )
        end
      end
      
    end
        
    // SEMI, ANTI
    if (method.in(["semi","anti"])) do
    
      // Iterate on rows of A
      a.each() rowA => do
        // Check for matches in B
        match: b.find() rowB => by.all() (colB, colA) => rowA[colA] == rowB[colB]
          
        // SEMI
        if (match != null and method.lower == "semi") out = out.addRow(rowA)
        
        // ANTI
        if (match == null and method.lower == "anti") out = out.addRow(rowA)
      end
      
    end
    
    //// Metadata //////////////////////////////////////////////////////////////////////////////////
    
    // To Do: Handle merging of grid and column metadata
    
    //// Post-Processing ///////////////////////////////////////////////////////////////////////////
    
    // Fix column order
    if (method.in(["left", "right", "inner", "full"])) do
      // A + B
      colOrder: union(colNames(a),colNames(b)).intersect(colNames(out))  
    else if (method.in(["semi","anti"])) do
      // A only
      colOrder: colNames(a).intersect(colNames(out))
    end
    
    // Enforce unique entries, restore column order and return
    return out.unique(colOrder).reorderCols(colOrder)
  end
---
name:leftJoin
func
doc:
  Returns all rows from 'a' and all columns from 'a' and 'b'. Rows in 'a' with no match in 'b' will
  have missing entries in the columns joined from 'b'. If there are multiple matches between 'a' and
  'b', all combinations of the matches are returned.
  
  'leftJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("left", a, b, by, opts)
---
name:outerJoin
func
doc:
  Alias for `fullJoin`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("full", a, b, by, opts) 
---
name:parseRef2
func
doc:
  Convenience wrapper for `parseRef` that supports leading "@" without throwing error.
src:
  (val, checked:true) => do
    if (val.startsWith("@")) parseRef(val[1..-1], checked) else parseRef(val, checked)
  end
---
name:removeNA
func
doc:
  Removes NA values from list or dict 'x'.
  
  Side effects: may rearrange dict key order.
src:
  (x) => x.findAll() v => v != na()
---
name:removeNaN
func
doc:
  Removes NaN values from list or dict 'x'.
  
  Side effects: may rearrange dict key order.
src:
  (x) => x.findAll() v => not v.isNaN
---
name:removeNull
func
doc:
  Removes null values from list or dict 'x'.
  
  Side effects: may rearrange dict key order.
src:
  (x) => x.findAll() v => v != null
---
name:removeVal
func
doc:
  Remove any elements from list or dict 'x' that equal 'val'.
  
  Side effects: may rearrange dict key order.
src:
  (x, val) => x.findAll() v => v != val
---
name:rep
func
doc:
  Replicate the value 'x' the specified number of 'times'. Returns a list.
  
  Examples
  --------
  
    rep(1, 2)               >> [1,1]
    rep("A", 3).concat("")  >> "AAA"
src:
  (x, times) => do
    out: []
    each(1..times, i => out = out.add(x))
    return out
  end
---
name:replace2
func
doc:
  Convenience wrapper for `replace` that also allows processing of URIs or dicts.
  
  - If 'val' is a string, identical to `replace`
  - If 'val' is a URI, it is coerced to string, modified, and re-parsed as a URI
  - If 'val' is a dict or list, all its string and URI elements have the replacement applied 
  
  For dicts and lists, the string replacement is not recursive. (For instance, the replacement will
  not reach inside of dicts nested within lists.)
src:
  (val, from, to) => do
    // Convenience URI replacement function
    replaceUri: (v, f, t) => v.toStr.replace(f, t).parseUri
    
    // String
    if (val.isStr) return val.replace(from, to)
    
    // URI
    if (val.isUri) return val.replaceUri(from, to)
    
    // Dict
    if (val.isDict or val.isList) do
      return val.map() v => do
        if (v.isStr) return v.replace(from, to)
        if (v.isUri) return v.replaceUri(from, to)
        v // Default
      end
    end
  end
---
name:rightJoin
func
doc:
  Returns all rows from 'b' and all columns from 'a' and 'b'. Rows in 'b' with no match in 'a' will
  have missing entries in the columns joined from 'a'. If there are multiple matches between 'a' and
  'b', all combinations of the matches are returned.
  
  'rightJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("right", a, b, by, opts)  
---
name:semiJoin
func
doc:
  Returns all rows from 'a' where there are matching values in 'b', keeping columns from 'a' only.
  Differs from `innerJoin` in that it will never duplicate rows of 'a'.
  
  'semiJoin' is one of six SQL-style joins modeled on the two-table verbs in the
  [dplyr]`https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html` R package. For
  more information, including syntax for 'by' and valid options for 'opts', see the
  [join documentation]`ext-nrelUtility::doc#joins`.
src:
  (a, b, by:null, opts:{}) => joinWithMethod("semi", a, b, by, opts)
---
name:setDiff
func
doc:
  Returns the set difference of two lists or dicts 'a' and 'b': all elements of 'a' that are not in
  'b'.
  
  For dicts, elements for removal are checked by name only. Values are ignored, including for
  keys mapped to 'Remove.val'.

  Examples
  --------
  
    setDiff([1, 2, 3],[2, 3, 4])  >> [1]
    setDiff({a, b}, {a, c})       >> {b}
    setDiff({a, b:1}, {b:2})      >> {a}
    setDiff({a, b:1}, {-b})       >> {a}
src:
  (a, b) => do
    // Lists
    if(a.isList and b.isList) do
      return a.findAll(v => not(b.contains(v))).unique
    
    // Dicts
    else if(a.isDict and b.isDict) do
      return a.findAll() (v, n) => not(b.has(n))
    
    // Other
    else do
      throw "Invalid arguments; need two lists or two dicts."
    end
  end
---
name:stringToDict
func
doc:
  Converts a string of comma-separated values to a dict using `eval`. Automatically adds brackets
  '{' '}' if needed.
src:
  (s) => do
    // Trim whitespace
    s = s.trim
    
    // Handle brackets
    if (not s.startsWith("{")) s = "{" + s
    if (not s.endsWith("}")) s = s + "}"

    // Eval
    eval(s)
  end
---
name:stringToList
func
doc:
  Converts a string of comma-separated values to a list using `eval`. Automatically adds brackets
  '[' ']' if needed.
src:
  (s) => do
    // Trim whitespace
    s = s.trim
    
    // Handle brackets
    if (not s.startsWith("[")) s = "[" + s
    if (not s.endsWith("]")) s = s + "]"
  
    // Eval
    eval(s)
  end
---
name:testJoin
func
nodoc
src:
  // Test harnass for *Join functions
  (expression) => do
    // Test grids
    a: [{name:"Bob",  age:63 , hometown:"Chicago", state:"IL"},
        {name:"Jane", age:41 , hometown:"New York", state:"NY"},
        {name:"Nico", age:25 , hometown:"Portland", state:"ME"}].toGrid

    b: [{hometown:"New York", state:"NY", population:8175133},
        {hometown:"Denver",   state:"CO", population:600158},
        {hometown:"Portland", state:"OR", population:583776},
        {hometown:"Portland", state:"ME", population:66093}].toGrid
    
    // Column order
    a = a.reorderCols(["name","age","hometown","state"])
    b = b.reorderCols(["hometown","state","population"])  
    
    // Simple test joins
    if (expression == "inner") return innerJoin(a, b)
    if (expression == "left")  return leftJoin(a, b)
    if (expression == "right") return rightJoin(a, b)
    if (expression == "full")  return fullJoin(a, b)
    if (expression == "semi")  return semiJoin(a, b)
    if (expression == "anti")  return antiJoin(a, b)
    
    // More complex join; use form: (a, b) => *Join(a, b, ...)
    f: expression.eval
    f(a, b)
  end
---
name:union
func
doc:
  Returns the set union of two lists or dicts 'a' and 'b'. Behavior for dicts differs by
  'checked':
  
  - If 'checked' is *true*, verifies that keys included in both 'a' and 'b' have matching values,
    and throws an error on mismatch.
  - If 'checked' is *false*, values from 'a' override values from 'b'. This is similar to
    'merge(b, a)' except that keys not mapped to 'Remove.val' always take precedence.

  Examples
  --------
  
    union([1, 2, 3],[2, 3, 4])        >> [1, 2, 3, 4]
    union({a, b}, {a, c})             >> {a, b, c}
    union({a, b}, {-b, c}, false)     >> {a, b, c}
    union({a, b:1}, {a, b:1})         >> {a, b:1}
    union({a, b:1}, {a, b:2})         >> error
    union({a, b:1}, {a, b:2}, false)  >> {a, b:1}
src:
  (a, b, checked:true) => do
    // Lists
    if(a.isList and b.isList) do
      return a.addAll(b).unique
    
    // Dicts
    else if(a.isDict and b.isDict) do
      // Value matching
      if (checked) do
        b.names.each() n => do
          if (a.has(n) and a[n] != b[n]) throw "Values do not match for key \"" + n + "\"."
        end
      end
      
      // Merge, without dropping values
      return merge(merge(a, b), merge(b, a))
    
    // Other
    else do
      throw "Invalid arguments; need two lists or two dicts."
    end
  end
